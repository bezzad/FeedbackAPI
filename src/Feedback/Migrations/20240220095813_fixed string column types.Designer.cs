// <auto-generated />
using System;
using Feedback;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Feedback.Migrations
{
    [DbContext(typeof(FeedbackContext))]
    [Migration("20240220095813_fixed string column types")]
    partial class fixedstringcolumntypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Feedback.Models.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Feedbacks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Feedback");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Feedback.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(6)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("Length")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Feedback.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Feedback.Models.QuizOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("QuizOptions");
                });

            modelBuilder.Entity("QuizOptionQuizQuestion", b =>
                {
                    b.Property<int>("OptionsId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.HasKey("OptionsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("QuizOptionQuizQuestion");
                });

            modelBuilder.Entity("Feedback.Models.Issue", b =>
                {
                    b.HasBaseType("Feedback.Models.Feedback");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Issue");
                });

            modelBuilder.Entity("Feedback.Models.QuizQuestion", b =>
                {
                    b.HasBaseType("Feedback.Models.Question");

                    b.HasDiscriminator().HasValue("QuizQuestion");
                });

            modelBuilder.Entity("Feedback.Models.Feedback", b =>
                {
                    b.HasOne("Feedback.Models.Question", "Question")
                        .WithMany("Feedbacks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Feedback.Models.File", b =>
                {
                    b.HasOne("Feedback.Models.Issue", "Feedback")
                        .WithMany("Files")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("QuizOptionQuizQuestion", b =>
                {
                    b.HasOne("Feedback.Models.QuizOption", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Feedback.Models.QuizQuestion", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Feedback.Models.Question", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Feedback.Models.Issue", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
